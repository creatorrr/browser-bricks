// Generated by CoffeeScript 1.6.3
(function() {
  var Box, _,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this._ = _ = {
    extend: function(dest, src) {
      var k, v, _results;
      _results = [];
      for (k in src) {
        if (!__hasProp.call(src, k)) continue;
        v = src[k];
        _results.push(dest[k] = v);
      }
      return _results;
    },
    pick: function(obj, props) {
      var k, result, _i, _len;
      result = {};
      for (_i = 0, _len = props.length; _i < _len; _i++) {
        k = props[_i];
        if (obj[k] != null) {
          result[k] = obj[k];
        }
      }
      return result;
    },
    uuid: function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === 'x' ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    },
    serialize: function(obj, _arg, cb) {
      var eq, k, sep, v;
      sep = _arg.sep, eq = _arg.eq;
      if (cb != null) {
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          obj[k] = cb(v);
        }
      }
      return ((function() {
        var _results;
        _results = [];
        for (k in obj) {
          if (!__hasProp.call(obj, k)) continue;
          v = obj[k];
          _results.push("" + k + eq + v);
        }
        return _results;
      })()).join(sep);
    }
  };

  Box = (function() {
    function Box() {}

    Box.prototype._EDITABLE = ['height', 'width', 'top', 'left'];

    Box.prototype._settings = {
      height: 100,
      width: 200,
      top: 0,
      left: 0,
      toolbar: false,
      directories: false,
      fullscreen: false,
      location: false,
      menubar: false,
      resizable: false,
      scrollbars: false,
      status: false
    };

    Box.prototype._window = null;

    Box.prototype.initialize = function(url, settings) {
      this.url = url;
      this._update(settings);
      this.id = _.uuid();
      return this;
    };

    Box.prototype._update = function(settings) {
      return _.extend(this._settings, _.pick(settings, this._EDITABLE));
    };

    Box.prototype._get = function(prop) {
      if (__indexOf.call(this._EDITABLE, prop) >= 0) {
        return this._settings[prop];
      }
    };

    Box.prototype._getAll = function() {
      return _.pick(this._settings, this._EDITABLE);
    };

    Box.prototype.show = function() {
      var opts;
      opts = _.serialize(this._getAll(), {
        sep: ',',
        eq: '='
      }, function(v) {
        switch (v) {
          case false:
            return 'no';
          case true:
            return 'yes';
          default:
            return v + '';
        }
      });
      this._window = window.open(this.url, this.id, opts);
      return this;
    };

    Box.prototype.hide = function() {
      this._window.close();
      this._window = null;
      return this;
    };

    Box.prototype.reset = function() {
      this._update(Box.prototype.settings);
      return this;
    };

    Box.prototype.position = function(coords) {
      var _ref, _ref1;
      if (coords != null) {
        this._update({
          left: (_ref = coords[0]) != null ? _ref : Box.prototype.settings.left,
          top: (_ref1 = coords[1]) != null ? _ref1 : Box.prototype.settings.top
        });
      }
      return [this._get('left'), this._get('top')];
    };

    return Box;

  })();

}).call(this);
